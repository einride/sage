name: Setup Sage
description: Setup Sage, including caching of tools and Go modules.

inputs:
  cacheKey:
    description: Custom cache key used
    required: false
    default: cachekey

  disableCache:
    description: Disable cache
    required: false
    default: false

  go-version:
    description: The Go version to download (if necessary) and use. Supports semver spec and ranges.
    required: false
    default: '1.24'

  go-version-file:
    description: 'Path to the go.mod or go.work file.'
    required: false

  check-latest:
    description: If true, checks whether the cached go version is the latest, if not then downloads the latest. Useful when you need to use the latest version.
    required: false
    default: false

  fetch-depth:
    description: Number of commits to fetch. 0 indicates all history for all branches and tags.
    default: 0

  checkout-submodules:
    description: "Whether to checkout submodules: `true` to checkout submodules or `recursive` to recursively checkout submodules."
    default: ''

runs:
  using: composite

  steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        # Needed for conventional commit linting.
        fetch-depth: ${{ inputs.fetch-depth }}
        submodules: ${{ inputs.checkout-submodules }}

    - name: Set up Go
      if: ${{ inputs.go-version-file == '' }}
      uses: actions/setup-go@v6
      with:
        go-version: ${{ inputs.go-version }}
        check-latest: ${{ inputs.check-latest }}
        cache: false  # cache is handled by separate actions/cache step, see https://github.com/actions/setup-go/issues/358

    - name: Set up Go using go version file
      if: ${{ inputs.go-version-file != '' }}
      uses: actions/setup-go@v6
      with:
        go-version-file: ${{ inputs.go-version-file }}
        check-latest: ${{ inputs.check-latest }}
        cache: false  # cache is handled by separate actions/cache step, see https://github.com/actions/setup-go/issues/358

    - name: Prepare Go version cache key
      id: cache-go-version
      shell: bash
      run: |
        if [ -n "${{ inputs.go-version-file }}" ]; then
          DIR=$(dirname "${{ inputs.go-version-file }}")
          cd "$DIR"
          VERSION=$(go version | awk '{print $3}' | sed 's/go//')
          echo "Go version cache key from file: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        else
          echo "Go version cache key from string: $VERSION"
          echo "version=${{ inputs.go-version }}" >> $GITHUB_OUTPUT
        fi

    - name: Set KOCACHE environment variable
      shell: bash
      run: echo "KOCACHE=/home/runner/.ko/cache" >> $GITHUB_ENV

    # NOTE: Cache key uses OS, cacheKey input, Go version (extracted from go-version-file or from go-version input), and go.sum files hash.
    # The restore-keys provide a fallback hierarchy when an exact match isn't found:
    # 1. Same OS/cacheKey/Go version, but different go.sum (e.g., after dependency changes)
    # 2. Same OS/cacheKey, but different Go version (e.g., after Go upgrades)
    # This maximizes cache reuse across branches and dependency changes while maintaining reasonable isolation.
    - name: Set up cache
      if: ${{ inputs.disableCache != 'true' }}
      uses: actions/cache@v4
      with:
        path: |
          ./.sage/tools
          ./.sage/bin
          /home/runner/.cache/go-build
          /home/runner/.cache/golangci-lint
          /home/runner/go/pkg/mod
          /home/runner/go/bin
          /home/runner/.ko/cache
        key: ${{ runner.os }}-${{ inputs.cacheKey }}-${{ steps.cache-go-version.outputs.version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-${{ inputs.cacheKey }}-${{ steps.cache-go-version.outputs.version }}-
          ${{ runner.os }}-${{ inputs.cacheKey }}-
